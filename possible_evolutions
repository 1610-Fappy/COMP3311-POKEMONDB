#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: <YOUR NAME HERE> <YOUR STUDENT ID HERE>
Written on: <DATE HERE>

Possible Evolutions

Given the name of a pokemon,
display a list of all the pokemon that could evolve into the given pokemon,
and a list of all the pokemon that the given pokemon could evolve into.
"""


import sys
import psycopg2
import helpers


### Constants
USAGE = f"Usage: {sys.argv[0]} <Pokemon Name>"


### Globals
db = None
Pokemon_Name = None


### Command-line args
if len(sys.argv) != 2:
    print(USAGE, file=sys.stderr)
    sys.exit(1)
Pokemon_Name = helpers.clean(sys.argv[1])


def main():
    # TODO: YOUR CODE HERE

    # List to store our prevolutions
    prevolutionList = []

    # List to store our evolutions
    postvolutionList = []

    curr = db.cursor()

    # Query to find all possible pokemon and check if input is valid
    pokemonQry = 'Select id,name from pokemon where name ~* %s'

    curr.execute(pokemonQry, [Pokemon_Name])

    pokeResult = curr.fetchone()

    # Condition to catch our incorrect input
    if(pokeResult is None):
        print(f"'{Pokemon_Name}' isn't a Pokemon that exists.", file=sys.stderr)
        db.close()
        return

    # Query to select from helper view where we have corresponding input
    Qry = '''
    select * from pre_post_req 
    where
        pre_evolution = %s::pokemon_id  or post_evolution = %s::pokemon_id;
    '''

    curr.execute(Qry,[pokeResult[0],pokeResult[0]])

    # Split our complete list into a list of pre-evolutions and a list of post-evolutions
    prevolutionList, postvolutionList = helpers.pre_post_split(curr.fetchall(), pokeResult[0])
    
    # Iterating through our pre-evolution and post-evolution list and taking into account if inverted or not
    stringlistpre= helpers.inv_req(prevolutionList)
    stringlistpost= helpers.inv_req(postvolutionList)

    # Used to split our post-evolution up into different lists corresponding to different evolutions
    splitPostList = helpers.split_post(stringlistpost)


    # Formatting and outputting our values
    if (len(prevolutionList) == 0):
        print(f"'{pokeResult[1]}' doesn't have any pre-evolutions.")
    else:
        print(f"'{pokeResult[1]}' can evolve from:")
        print(f"\t'{stringlistpre[0][2]}' when the following requirements are satisfied:")
        print(f"{helpers.output_format(stringlistpre)}")
    print('')
    if (len(postvolutionList) == 0):
        print(f"'{pokeResult[1]}' doesn't have any post-evolutions.")
    else:
        print(f"'{pokeResult[1]}' can evolve into:")
        for t in splitPostList:
            print(f"{helpers.output_format_post(t)}\n")

    db.close()


if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
